{"version":3,"sources":["webpack:///./src/templates/post-template.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/layout.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["query","postTemplate","_ref","data","_data$mdx$frontmatter","mdx","frontmatter","title","date","author","image","body","code","img","childImageSharp","fluid","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","className","styles","template","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","link","info","gatsby_image__WEBPACK_IMPORTED_MODULE_4___default","content","gatsby_mdx__WEBPACK_IMPORTED_MODULE_6__","m","module","exports","require","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","layout","children","Fragment","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","_objectSpread","json"],"mappings":"+NAiCaA,EAAK,aAsBHC,UAhDM,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAAWC,EACMD,EAAKE,IAAIC,YAAxCC,EADyBH,EACzBG,MAAOC,EADkBJ,EAClBI,KAAMC,EADYL,EACZK,OAAQC,EADIN,EACJM,MACrBC,EAASR,EAAKE,IAAIO,KAAlBD,KACFE,EAAMH,EAAMI,gBAAgBC,MAElC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,WAASE,UAAWC,IAAOC,UACzBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,IAAIJ,UAAWC,IAAOI,MAA/B,qBAGAT,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOK,MACrBV,EAAAC,EAAAC,cAAA,UAAKX,GACLS,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBAAUT,GADZ,MAC6BO,EAAAC,EAAAC,cAAA,YAAOV,KAGtCQ,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAOF,MAAOF,IACdG,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAOO,SACrBZ,EAAAC,EAAAC,cAACW,EAAA,YAAD,KAAclB,4BC1BxB,IAAsBmB,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,oCCA/C,IAAAK,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,KAWeG,IARA,SAAArC,GAAkB,IAAfsC,EAAetC,EAAfsC,SAChB,OACEH,EAAApB,EAAAC,cAAAmB,EAAApB,EAAAwB,SAAA,KACEJ,EAAApB,EAAAC,cAAA,YAAOsB,uCCNb,IAAAL,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAO,EAAAN,EAAA,IAAAO,EAAAP,EAAAE,EAAAI,GAAAN,EAAAQ,EAAAC,EAAA,sBAAAF,EAAA1B,IAAAmB,EAAA,KAAAA,EAAA,GAcyBU,QAAOC,QAELC,IAAMC,cAAc,qbCMhCC,UAjBU,SAAAhD,GAAiC,IAA9BiD,EAA8BjD,EAA9BiD,SAAUC,EAAoBlD,EAApBkD,cACpC,OAAKA,EAGEJ,IAAM9B,cAAcmC,+UAApBC,CAAA,CACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-post-template-js-36484d78271001867d37.js","sourcesContent":["import React from \"react\"\r\nimport styles from \"../css/postTemplate.module.css\"\r\nimport { Link, graphql } from \"gatsby\"\r\nimport Image from \"gatsby-image\"\r\nimport Layout from \"../components/layout\"\r\nimport { MDXRenderer } from \"gatsby-mdx\"\r\n\r\nconst postTemplate = ({ data }) => {\r\n  const { title, date, author, image } = data.mdx.frontmatter\r\n  const { body } = data.mdx.code\r\n  const img = image.childImageSharp.fluid\r\n\r\n  return (\r\n    <Layout>\r\n      <section className={styles.template}>\r\n        <Link to=\"/\" className={styles.link}>\r\n          back to all posts\r\n        </Link>\r\n        <div className={styles.info}>\r\n          <h1>{title}</h1>\r\n          <h4>\r\n            <span>by {author}</span> / <span>{date}</span>\r\n          </h4>\r\n        </div>\r\n        <Image fluid={img} />\r\n        <div className={styles.content}>\r\n          <MDXRenderer>{body}</MDXRenderer>\r\n        </div>\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query getPost($slug: String!) {\r\n    mdx(frontmatter: { slug: { eq: $slug } }) {\r\n      frontmatter {\r\n        title\r\n        slug\r\n        date(formatString: \"MMMM Do, YYYY\")\r\n        author\r\n        image {\r\n          childImageSharp {\r\n            fluid {\r\n              ...GatsbyImageSharpFluid_withWebp\r\n            }\r\n          }\r\n        }\r\n      }\r\n      code {\r\n        body\r\n      }\r\n    }\r\n  }\r\n`\r\nexport default postTemplate\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\r\nimport \"./layout.css\"\r\n\r\nconst layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      <main>{children}</main>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default layout\r\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}